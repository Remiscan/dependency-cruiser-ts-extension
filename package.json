{
  "name": "dependency-cruiser-ts",
  "displayName": "Dependency Cruiser TS",
  "description": "Generates a dependency graph from a JavaScript or TypeScript file",
  "version": "0.1.1",
  "publisher": "remiscan",
  "galleryBanner": {
    "color": "#283178",
    "theme": "dark"
  },
  "icon": "./assets/icon.png",
  "engines": {
    "vscode": "^1.88.0"
  },
  "categories": [
    "Visualization"
  ],
  "keywords": [
    "typescript", "javascript", "dependencies", "imports", "graph"
  ],
  "homepage": "https://github.com/Remiscan/dependency-cruiser-ts-extension",
  "bugs": {
    "url": "https://github.com/Remiscan/dependency-cruiser-ts-extension/issues",
    "email": "contact@remiscan.fr"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/Remiscan/dependency-cruiser-ts-extension.git"
  },
  "activationEvents": [],
  "main": "./out/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "dependency-cruiser-ts.analyzeDependencies",
        "title": "See dependency graph"
      }
    ],
    "menus": {
      "explorer/context": [
        {
          "when": "resourceLangId == typescript || resourceLangId == javascript",
          "command": "dependency-cruiser-ts.analyzeDependencies"
        }
      ]
    },
    "configuration": {
      "title": "Dependency Cruiser TS",
      "properties": {
        "dependency-cruiser-ts.analysis.enableCustomConfiguration": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Looks for a `.dependency-cruiser.json` file at the root of your workspace folder. If one is found, **it will overwrite this extension's settings** for `dependency-cruiser`, giving you full control of it. [Learn more abour its syntax in the `dependency-cruiser` documentation](https://github.com/sverweij/dependency-cruiser/blob/main/doc/rules-reference.md)."
        },
        "dependency-cruiser-ts.analysis.rules.noCircular": {
          "type": "boolean",
          "default": false,
          "description": "Warns you about circular dependencies, by highlighting them on the graph."
        },
        "dependency-cruiser-ts.analysis.rules.noDev": {
          "type": "boolean",
          "default": false,
          "description": "Warns you about imported dev dependencies in your `src` folder, by highlighting them on the graph."
        },
        "dependency-cruiser-ts.analysis.tsConfigPattern": {
          "type": "string",
          "default": "*{ts,js}config*.json",
          "description": "Glob pattern for the file name of the tsconfig file. The extension will look for files matching this pattern in the workspace folder of the analyzed file. If multiple matching files are found, you will be prompted to pick one."
        },
        "dependency-cruiser-ts.analysis.collapsePattern": {
          "type": "string",
          "default": "node_modules/(@[^/]+/[^/]+|[^/]+)",
          "markdownDescription": "Regular expression used to collapse many graph nodes into a single one. For example, if your project imports `@foo/bar/one.js`, `@foo/bar/two.js` and `@foo/qux/three.js` :\n- `node_modules/(@[^/]+/[^/]+|[^/]+)` will collapse the `node_modules` part of the graph into two nodes: `@foo/bar` and `@foo/qux`\n- `node_modules/[^/]+` will collapse the `node_modules` part of the graph into one node: `@foo`"
        },
        "dependency-cruiser-ts.analysis.includeOnly": {
          "type": "string",
          "markdownDescription": "Regular expression that restricts the dependency analysis to files that match it. Can be combined with the `exclude` option. For example:\n- `^src/` will ignore imports from outside of the `src` folder."
        },
        "dependency-cruiser-ts.analysis.exclude": {
          "type": "string",
          "markdownDescription": "Regular expression that excludes the files that match it from the dependency analysis. Can be combined with the `includeOnly` option. For example:\n- `^node_modules/` will ignore imports from inside of the `node_modules` folder.\n"
        },
        "dependency-cruiser-ts.graph.theme": {
          "type": "string",
          "default": "improved",
          "description": "Visual theme used in the graph.",
          "enum": [
            "improved",
            "basic",
            "none"
          ]
        },
        "dependency-cruiser-ts.graph.colorScheme": {
          "type": "string",
          "default": "system",
          "description": "Color scheme (light or dark) used in the graph.",
          "enum": [
            "system",
            "light",
            "dark"
          ],
          "enumDescriptions": [
            "Follows your system settings",
            "Light mode",
            "Dark mode"
          ]
        },
        "dependency-cruiser-ts.graph.linesShape": {
          "type": "string",
          "default": "spline",
          "description": "Controls the shape of the lines between nodes.",
          "enum": [
            "spline",
            "curved",
            "ortho",
            "line",
            "polyline"
          ],
          "enumDescriptions": [
            "Lines will be curved and avoid other nodes",
            "Lines will be curved an go through other nodes",
            "Lines will be straight and make right angles",
            "Lines will be straight",
            "Lines will move in multiple successive straight paths"
          ]
        },
        "dependency-cruiser-ts.graph.direction": {
          "type": "string",
          "default": "LR",
          "description": "Direction of the graph, i.e. the direction from a node A to the nodes of the modules imported by A.",
          "enum": [
            "LR",
            "TB",
            "RL",
            "BT"
          ],
          "enumItemLabels": [
            "Left to right",
            "Top to bottom",
            "Right to left",
            "Bottom to top"
          ],
          "enumDescriptions": [
            "If a module A imports a module B, then B will be drawn to the right of A",
            "If a module A imports a module B, then B will be drawn to the bottom of A",
            "If a module A imports a module B, then B will be drawn to the left of A",
            "If a module A imports a module B, then B will be drawn to the top of A"
          ]
        }
      }
    }
  },
  "scripts": {
    "bundle:dc": "esbuild ./node_modules/dependency-cruiser/src/main/cruise.mjs --bundle --minify --outfile=dist/dependency-cruiser.js --external:vscode --external:enhanced-resolve/lib/createInnerCallback --alias:dependency-cruiser=dist/dependency-cruiser.js --format=esm --platform=node && rollup --config rollup.dc.config.mjs",
    "vscode:prepublishNON": "npm run esbuild-base -- --minify",
    "vscode:prepublish": "npm run copy && npm run compile",
    "esbuild-base": "esbuild ./src/extension.ts --bundle --outfile=dist/extension.js --external:vscode --format=cjs --platform=node",
    "esbuild": "npm run esbuild-base -- --sourcemap",
    "esbuild-watch": "npm run esbuild-base -- --sourcemap --watch",
    "test-compile": "tsc -p ./",
    "copy": "mkdir -p ./out/webview && cp -R ./src/webview/* ./out/webview",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "pretest": "npm run compile && npm run lint",
    "lint": "eslint src --ext ts",
    "test": "vscode-test"
  },
  "devDependencies": {
    "@rollup/plugin-node-resolve": "^15.2.3",
    "@types/mocha": "^10.0.6",
    "@types/node": "18.x",
    "@types/vscode": "^1.88.0",
    "@typescript-eslint/eslint-plugin": "^7.4.0",
    "@typescript-eslint/parser": "^7.4.0",
    "@vscode/test-cli": "^0.0.8",
    "@vscode/test-electron": "^2.3.9",
    "esbuild": "^0.20.2",
    "eslint": "^8.57.0",
    "rollup": "^4.15.0",
    "rollup-plugin-dts": "^6.1.0"
  },
  "dependencies": {
    "@viz-js/viz": "^3.4.0",
    "dependency-cruiser": "^16.3.1",
    "typescript": "^5.4.5"
  }
}
